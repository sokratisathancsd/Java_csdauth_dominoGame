/*
 * ALL7 GUI
 */
package gui;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;

/**
 * Simulates a all7 gui 
 * @author Kwnstantinos Perrakis
 * @author Sokratis Athanasiadis
 * @version 1.1
 * Simulates a all7 gui 
 */
public class All7Gui extends javax.swing.JFrame {

    /**
     * Creates new form All7Gui
     * @param players the number of players
     * @throws  java.lang.InterruptedException for thread
     */
    public All7Gui(int players) throws InterruptedException {
        TileStack stack=new TileStack();
        stack.shuffledStuck();
        game=new All7(stack,players);
        transparent=new Color(0,0,0,0);
        Toolkit t=Toolkit.getDefaultToolkit();
        Dimension d=t.getScreenSize();
        initComponents();
        this.setExtendedState(this.MAXIMIZED_BOTH); 
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
        int x=((d.width/2-this.getWidth()/2));
        int y=((d.height/2-this.getHeight()/2));
        this.setLocation(x,y);
        setCursor();
        UpdatePlayersTiles();
        this.setVisible(true);
        if(game.getTurn()!=0){
           All7Gui.multithread thread=new All7Gui.multithread();
             thread.start();
             
        }
        else {
            JOptionPane.showMessageDialog(this,"It's Your Turn");
        }
    }
     /**
     * This method sets the cursor of the buttons to hand
     */
    public void setCursor(){
        jButton3.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jButton2.setCursor(new Cursor(Cursor.HAND_CURSOR));
        jButton1.setCursor(new Cursor(Cursor.HAND_CURSOR));
        
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("All7");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 204, 204));
        jLabel2.setText("Stack Tiles: 28");

        jButton1.setFont(new java.awt.Font("Malgun Gothic", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 153));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/draw.png"))); // NOI18N
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });

        jButton2.setBackground(transparent);
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/home button.png"))); // NOI18N
        jButton2.setOpaque(false);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton2MouseEntered(evt);
            }
        });

        jButton3.setBackground(transparent);
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/points button.png"))); // NOI18N
        jButton3.setOpaque(false);
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jButton3MouseEntered(evt);
            }
        });

        jPanel1.setOpaque(false);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Player", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 204, 204))); // NOI18N
        jPanel3.setOpaque(false);
        jPanel3.setLayout(new java.awt.GridLayout(1, 0));

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 204, 204))); // NOI18N
        jPanel4.setOpaque(false);
        jPanel4.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 87, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/table.jpg"))); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(291, 291, 291)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addGap(1, 1, 1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel2)))
                .addGap(30, 30, 30)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
 * Default operation when this window is closing
 * @param evt window closed
 */
    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        GUi menu=new GUi();
        menu.setVisible(true);
    }//GEN-LAST:event_formWindowClosed
/**
 * Plays a sound effect, and disposes the window when button is clicked
 * @param evt button is clicked
 */
    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
       playSound("Game Menu Click SOUND Effect.wav");
        this.dispose();
       
    }//GEN-LAST:event_jButton2MouseClicked
/**
 * Appears info of what the button does, when mouse enters in button area
 * @param evt mouse enters the button area
 */
    private void jButton2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseEntered
       jButton2.setToolTipText("return to menu");
    }//GEN-LAST:event_jButton2MouseEntered
/**
 * Plays a sound effect and appears all players current points
 * @param evt mouse clicked
 */
    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
       playSound("Game Menu Click SOUND Effect.wav");
        ArrayList<String> temp;
        temp=game.getAllPlayersPoints();
        JOptionPane.showMessageDialog(null,temp);
    }//GEN-LAST:event_jButton3MouseClicked
/**
 * Appears a hint of what the button does when mouse enters the button
 * @param evt mouse enters the button
 */
    private void jButton3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseEntered
        jButton3.setToolTipText("show points ");
    }//GEN-LAST:event_jButton3MouseEntered
/**
 * It might inform the player for the fact that he cant draw twice a round, and performs draw of a Tile when he clicks the button
 * @param evt mouse clicked
 */
    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
      if(game.getTurn()==0){
        if (checkDraw==1){
           JOptionPane.showMessageDialog(null,"You can draw a Tile only once per turn!");
           return;
       }
        game.playerdrawTile();
       UpdatePlayersTiles();
       checkDraw=1;
      } 
    }//GEN-LAST:event_jButton1MouseClicked
     
    /**
     * It takes the position of the label that the mouse is clicked
     */
    public class Listener implements ActionListener{

        @Override
        public void actionPerformed(ActionEvent e) {
           if (game.getTurn()==0){
               playSound("Click2-Sebastian-759472264.wav");
           playerPlay(Integer.valueOf(Integer.valueOf(e.getActionCommand())));
           }
           if(game.getTurn()!=0){
              All7Gui.multithread thread=new All7Gui.multithread();
              thread.start();
           }
        }
       }
      /**
     * This method makes the move for the player it also calls RoundOver to check if the round is over and checkWinner to check if there is a winner
     * @param i The selected tile
     */
    public void playerPlay(int i){
        if (game.getTurn()==0){
            checkDraw=0;
            game.playerMoves(i);
            UpdateTableTiles();
            UpdatePlayersTiles();
            }
        boolean flag;
        flag=RoundOver();
        if(flag==true){
          int winner=checkWinner();
                if (winner==-1){             // It means that there is no winner
                    newRound();
                }
                else{
                    return;
                }
        }
    }
    
    /**
  * This method makes the moves for the Bots it also check if the round is over and if there is a winner 
  * @throws java.lang.InterruptedException for the thread sleep
  */  
public void botsPlay() throws InterruptedException{
     while(game.getTurn()!=0&&game.checkPoints()==-1){
            JOptionPane.showMessageDialog(this,"Player "+(game.getTurn()+1)+" is playing.");
            Thread.sleep(1000);
            game.botMoves();
            UpdateTableTiles(); 
            boolean flag;
            flag=RoundOver();
            if(flag==true){
                int winner=checkWinner();
                if (winner==-1){             // It means that there is no winner
                    newRound();
                }
                else{
                    return;
                }
            }
            else if (game.getTurn()==0){
                 game.PlayerAutoDraw();
                 JOptionPane.showMessageDialog(this,"Its your Turn!");
                 UpdatePlayersTiles();
                }
     }
}

/**\
    * It checks if there is a winner. If there is one it prints who he is and return to the menu
    * @return -1 if there is no Winner or a number [0,numbofplayers] which is the winner 
    */
    public int checkWinner(){
    int Winner=game.checkPoints();
            if (Winner!=-1){
                if(Winner==0){
                    playSound("Short_triumphal_fanfare-John_Stracke-815794903.wav");
                   JOptionPane.showMessageDialog(null,"You have won"); 
                }
                else {
                    playSound("The Price is Right Losing Horn - Gaming Sound Effect (HD).wav");
                    JOptionPane.showMessageDialog(null,"The winner is Player"+(Winner+1)+",so you have LOST");
                }
                this.dispose();
            }
            return Winner;
 }
    
     /**
     * This method checks if the round is over
     * @return true if a round is over, false else
     */
    public boolean RoundOver(){
              if (((game.checkMoves()==false)&&(game.getGameStack().getStack().size()==2))||(game.emptyStacks())){
               ArrayList<String> temp;
               game.addPoints();
               temp=game.getAllPlayersPoints();
               JOptionPane.showMessageDialog(null,"The round is Over\n"+temp);
             return true;
              }
         return false;
    }
    /**
     * Multithread for botsPlay
     */
    public class multithread extends Thread{
        @Override
        public void run(){
            try {
                botsPlay();
            } catch (InterruptedException ex) {
                Logger.getLogger(All7Gui.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }
    
    /**
     * This method starts a new Round
     */
    public void newRound(){
        TileStack Stack=new TileStack();
        Stack.shuffledStuck();
        game.newRound(Stack);
        game.startingPlayer();
        if (game.getTurn()==0){
            UpdateTableTiles();
            UpdatePlayersTiles();
            JOptionPane.showMessageDialog(this,"It's Your Turn");
        }
        else {
            UpdateTableTiles();
            UpdatePlayersTiles();
        }
    }
    
    /**
     * This method updates the player's tiles panel
     */
    public void UpdatePlayersTiles(){
        jLabel2.setText("Stack Tiles: "+game.getGameStack().getStack().size());
        int size=game.getPlayers().get(0).GetTilesStack().size();
        PlayersTiles=new ArrayList<>();
        All7Gui.Listener listener=new All7Gui.Listener();
        jPanel3.removeAll();
        for (int i=0;i<size;i++){
            javax.swing.JButton jButton1;
            jButton1 = new javax.swing.JButton();
            jButton1.setSize(new Dimension(30,55));
            jButton1.setOpaque(false);
            jButton1.setBackground(transparent);
            jButton1.setCursor(new Cursor(Cursor.HAND_CURSOR));
            String file=game.getPlayers().get(0).getTile(i).get_side1()+"-"+game.getPlayers().get(0).getTile(i).get_side2()+".png";
            ImageIcon icon=new ImageIcon(file);
            jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/"+icon))); // NOI18N
            jButton1.setActionCommand(String.valueOf(i));
            jButton1.addActionListener(listener);
            PlayersTiles.add(jButton1);
            jPanel3.add(PlayersTiles.get(i));
        }
        jPanel3.revalidate();
        jPanel3.repaint();
      }
    
   /**
    * This method Updates the table's panel
    */ 
   public void UpdateTableTiles(){
    jLabel2.setText("Stack Tiles: "+game.getGameStack().getStack().size());
    TableTiles=new ArrayList<>();
    jPanel4.removeAll();
    int size=game.getTable().size();
    for(int i=0;i<size;i++){
            javax.swing.JLabel jLabel4;
            jLabel4 = new javax.swing.JLabel();
            String file;
            
            if(game.getTable().get(i).get_side1()<=game.getTable().get(i).get_side2()){
             file=game.getTable().get(i).get_side1()+"-"+game.getTable().get(i).get_side2()+".png";
            }
            else{
             file=game.getTable().get(i).get_side1()+"-"+game.getTable().get(i).get_side2()+".png";
            }
            ImageIcon icon=new ImageIcon(file);
            jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/"+icon))); // NOI18N
            jLabel4.setSize(new Dimension(30,55));
            TableTiles.add(jLabel4);
            jPanel4.add(TableTiles.get(i));
    }
    jPanel4.revalidate();
    jPanel4.repaint();
}
   
   
   /**
     * This function starts all the sound effects of this menu
     * @param soundName the file that contains the sound that we want to play
     */
   public void playSound(String soundName)
 {
   try 
   {
   AudioInputStream audioInputStream = AudioSystem.getAudioInputStream(new File(soundName).getAbsoluteFile( ));
   Clip clip = AudioSystem.getClip( );
   clip.open(audioInputStream);
   clip.start( );
   }
   catch(Exception ex)
   {
     System.out.println("Error with playing sound.");
     ex.printStackTrace( );
   }
 }
    int checkDraw;
    private ArrayList<JButton> PlayersTiles;
    private ArrayList<JLabel> TableTiles;
    private final All7 game;
    Color transparent;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    // End of variables declaration//GEN-END:variables
}
